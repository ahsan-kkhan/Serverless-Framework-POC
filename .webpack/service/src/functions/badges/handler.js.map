{"version":3,"file":"src/functions/badges/handler.js","mappings":"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","sources":["webpack:///../../../src/libs/api-gateway.ts","webpack:///../../../src/libs/lambda.ts","webpack:///../../../src/model/index.ts","webpack:///../../../src/services/badgesService.ts","webpack:///../../../src/services/index.ts","webpack:///../../uuid/dist/esm-node/regex.js","webpack:///../../uuid/dist/esm-node/rng.js","webpack:///../../uuid/dist/esm-node/stringify.js","webpack:///../../uuid/dist/esm-node/v4.js","webpack:///../../uuid/dist/esm-node/validate.js","webpack:///external commonjs \"aws-sdk\"","webpack:///external node-commonjs \"crypto\"","webpack:///../../@middy/core/index.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///../../../src/functions/badges/handler.ts"],"sourcesContent":["import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\r\nimport type { FromSchema } from \"json-schema-to-ts\";\r\n\r\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\r\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\r\n\r\nexport const formatJSONResponse = (response: Record<string, unknown>):any => {\r\n  return {\r\n    statusCode: 200,\r\n    body: JSON.stringify(response)\r\n  }\r\n}\r\n","import middy from \"@middy/core\"\r\n// import middyJsonBodyParser from \"@middy/http-json-body-parser\"\r\n\r\nexport const middyfy = (handler:any):any => {\r\n  return middy(handler)\r\n}\r\n","import * as AWS from \"aws-sdk\";\r\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\n\r\nconst dynamoDBClient = (): DocumentClient => {\r\n  if (process.env.IS_OFFLINE) {\r\n    return new AWS.DynamoDB.DocumentClient({\r\n      region:process.env.dynamodbRegion,\r\n      endpoint:process.env.dynamodbEndpoint,\r\n    });\r\n  }\r\n\r\n  return new AWS.DynamoDB.DocumentClient();\r\n};\r\n\r\nexport default dynamoDBClient\r\n","import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\n\r\nimport Badges from \"../model/Badges\";\r\n\r\nexport default class badgesService{\r\n\r\n    private Tablename = \"BadgesTable\";\r\n\r\n    constructor(private docClient: DocumentClient) { }\r\n\r\n    async getAllBadges(){\r\n        try{\r\n            const badges = await this.docClient.scan({\r\n                TableName: this.Tablename,\r\n            }).promise()\r\n            // console.log(badges.Items)\r\n            return badges;\r\n        }\r\n        catch(err){\r\n            return err;\r\n        }\r\n    }\r\n\r\n    async createBadges(badges: Badges) {\r\n        try{\r\n            await this.docClient.put({\r\n                TableName: this.Tablename,\r\n                Item: badges\r\n            }).promise()\r\n            return badges ;\r\n        }\r\n        catch(err){\r\n            return err;\r\n        }\r\n\r\n    }\r\n\r\n    async getBadges(id: string): Promise<any> {\r\n    try {\r\n        const badges = await this.docClient.get({\r\n            TableName: this.Tablename,\r\n            Key: {\r\n                badgeId: id\r\n            }\r\n        }).promise()\r\n        if (!badges.Item) {\r\n            throw new Error(\"Id does not exit\");\r\n        }\r\n        return badges;\r\n    }\r\n    catch(err){\r\n        return err;\r\n    }\r\n    }\r\n\r\n    async updateBadges(id: string, badges: Partial<Badges>){\r\n        try{\r\n            const updated = await this.docClient\r\n                .update({\r\n                    TableName: this.Tablename,\r\n                    Key: { badgeId: id },\r\n                    UpdateExpression:\r\n                        \"set badgeTitle = :bt, badgeImage = :bi, badgeStatus = :bs, isAdmin= :iA\" ,\r\n                    ExpressionAttributeValues: {\r\n                        \":bt\":badges.badgeTitle,\r\n                        \":bi\":badges.badgeImage,\r\n                        \":bs\":badges.badgeStatus,\r\n                        \":iA\":badges.isAdmin\r\n                    },\r\n                    ReturnValues: \"ALL_NEW\",\r\n                })\r\n                .promise();\r\n\r\n            return updated.Attributes as Badges;\r\n        }\r\n        catch(err){\r\n            return err;\r\n        }\r\n    }\r\n\r\n    async deleteBadges(id: string){\r\n       try{\r\n            return await this.docClient.delete({\r\n                TableName: this.Tablename,\r\n                Key: {\r\n                    badgeId: id\r\n                }\r\n            }).promise()\r\n        }\r\n        catch(err){\r\n            return err;\r\n        }\r\n    }\r\n}\r\n","import dynamoDBClient from \"../model\";\r\n// import TodoServerice from \"./todosService\"\r\nimport BadgesServerice from \"./badgesService\"\r\n\r\n\r\n// export const todoService = new TodoServerice(dynamoDBClient()); \r\nconst badgesService = new BadgesServerice(dynamoDBClient());\r\n\r\n// export todoService;\r\nexport default badgesService;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","module.exports = require(\"aws-sdk\");","module.exports = require(\"crypto\");","\"use strict\";\n\nconst middy = (baseHandler = () => {}, plugin) => {\n  var _plugin$beforePrefetc;\n\n  plugin === null || plugin === void 0 ? void 0 : (_plugin$beforePrefetc = plugin.beforePrefetch) === null || _plugin$beforePrefetc === void 0 ? void 0 : _plugin$beforePrefetc.call(plugin);\n  const beforeMiddlewares = [];\n  const afterMiddlewares = [];\n  const onErrorMiddlewares = [];\n\n  const instance = (event = {}, context = {}) => {\n    var _plugin$requestStart;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$requestStart = plugin.requestStart) === null || _plugin$requestStart === void 0 ? void 0 : _plugin$requestStart.call(plugin);\n    const request = {\n      event,\n      context,\n      response: undefined,\n      error: undefined,\n      internal: {}\n    };\n    return runRequest(request, [...beforeMiddlewares], baseHandler, [...afterMiddlewares], [...onErrorMiddlewares], plugin);\n  };\n\n  instance.use = middlewares => {\n    if (Array.isArray(middlewares)) {\n      for (const middleware of middlewares) {\n        instance.applyMiddleware(middleware);\n      }\n\n      return instance;\n    }\n\n    return instance.applyMiddleware(middlewares);\n  };\n\n  instance.applyMiddleware = middleware => {\n    const {\n      before,\n      after,\n      onError\n    } = middleware;\n\n    if (!before && !after && !onError) {\n      throw new Error('Middleware must be an object containing at least one key among \"before\", \"after\", \"onError\"');\n    }\n\n    if (before) instance.before(before);\n    if (after) instance.after(after);\n    if (onError) instance.onError(onError);\n    return instance;\n  }; // Inline Middlewares\n\n\n  instance.before = beforeMiddleware => {\n    beforeMiddlewares.push(beforeMiddleware);\n    return instance;\n  };\n\n  instance.after = afterMiddleware => {\n    afterMiddlewares.unshift(afterMiddleware);\n    return instance;\n  };\n\n  instance.onError = onErrorMiddleware => {\n    onErrorMiddlewares.push(onErrorMiddleware);\n    return instance;\n  };\n\n  instance.__middlewares = {\n    before: beforeMiddlewares,\n    after: afterMiddlewares,\n    onError: onErrorMiddlewares\n  };\n  return instance;\n};\n\nconst runRequest = async (request, beforeMiddlewares, baseHandler, afterMiddlewares, onErrorMiddlewares, plugin) => {\n  try {\n    await runMiddlewares(request, beforeMiddlewares, plugin); // Check if before stack hasn't exit early\n\n    if (request.response === undefined) {\n      var _plugin$beforeHandler, _plugin$afterHandler;\n\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeHandler = plugin.beforeHandler) === null || _plugin$beforeHandler === void 0 ? void 0 : _plugin$beforeHandler.call(plugin);\n      request.response = await baseHandler(request.event, request.context);\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$afterHandler = plugin.afterHandler) === null || _plugin$afterHandler === void 0 ? void 0 : _plugin$afterHandler.call(plugin);\n      await runMiddlewares(request, afterMiddlewares, plugin);\n    }\n  } catch (e) {\n    // Reset response changes made by after stack before error thrown\n    request.response = undefined;\n    request.error = e;\n\n    try {\n      await runMiddlewares(request, onErrorMiddlewares, plugin);\n    } catch (e) {\n      // Save error that wasn't handled\n      e.originalError = request.error;\n      request.error = e;\n      throw request.error;\n    } // Catch if onError stack hasn't handled the error\n\n\n    if (request.response === undefined) throw request.error;\n  } finally {\n    var _plugin$requestEnd;\n\n    await (plugin === null || plugin === void 0 ? void 0 : (_plugin$requestEnd = plugin.requestEnd) === null || _plugin$requestEnd === void 0 ? void 0 : _plugin$requestEnd.call(plugin, request));\n  }\n\n  return request.response;\n};\n\nconst runMiddlewares = async (request, middlewares, plugin) => {\n  for (const nextMiddleware of middlewares) {\n    var _plugin$beforeMiddlew, _plugin$afterMiddlewa;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeMiddlew = plugin.beforeMiddleware) === null || _plugin$beforeMiddlew === void 0 ? void 0 : _plugin$beforeMiddlew.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name);\n    const res = await (nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware(request));\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$afterMiddlewa = plugin.afterMiddleware) === null || _plugin$afterMiddlewa === void 0 ? void 0 : _plugin$afterMiddlewa.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name); // short circuit chaining and respond early\n\n    if (res !== undefined) {\n      request.response = res;\n      return;\n    }\n  }\n};\n\nmodule.exports = middy;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { APIGatewayProxyEvent, APIGatewayProxyResult } from \"aws-lambda\";\r\nimport { formatJSONResponse } from '@libs/api-gateway';\r\nimport { middyfy } from '@libs/lambda';\r\nimport badgesService from '../../services/index'\r\nimport schema from '../../model/badgesCon'\r\n// const { graphql  } = require('graphql');\r\nimport {graphql} from 'graphql';\r\n// import dynamoDBClient from '../../model/index'\r\n\r\n\r\nimport { v4 } from \"uuid\";\r\n// import Badges from \"src/model/Badges\";\r\n// import Badges from \"src/model/Badges\";\r\n// const b = new badgesService(dynamoDBClient);\r\nexport const getAllBadges = middyfy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n    try{\r\n        // console.log(event.pathParameters.query)\r\n        // const badges= await graphql({schema,source:event.pathParameters.query}) \r\n        const badges = await badgesService.getAllBadges();\r\n        // return formatJSONResponse({\r\n        //     badges\r\n        // })\r\n        return badges;\r\n    } \r\n    catch (e) {\r\n        console.log(e)\r\n        return formatJSONResponse({\r\n            status: 500,\r\n            message: e\r\n        });\r\n    }\r\n})\r\n\r\nexport const createBadges = middyfy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n    try {\r\n        // console.log(event)\r\n        const parsedBody =  (event[\"args\"][\"input\"]);\r\n        // const badges= await graphql({schema,source: parsedBody.query})\r\n        // console.log(parsedBody.badgeImage)\r\n        const data={\r\n            badgeId:v4(),\r\n            badgeTitle:parsedBody.badgeTitle,\r\n            badgeStatus:parsedBody.badgeStatus,\r\n            badgeImage:parsedBody.badgeImage,\r\n            isAdmin:true\r\n        };\r\n        const badges= await badgesService.createBadges(data);\r\n        // console.log(badges)\r\n        // return formatJSONResponse({\r\n        //     badges\r\n        // });\r\n        return badges\r\n    } catch (e) {\r\n        console.log(e)\r\n        return formatJSONResponse({\r\n            status: 500,\r\n            message: e\r\n        });\r\n    }\r\n})\r\n\r\nexport const getBadges = middyfy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n    try {\r\n        console.log(event[\"args\"][\"badgeId\"])\r\n        const id =event[\"args\"][\"badgeId\"];\r\n        const badges=await badgesService.getBadges(id);\r\n        // const badges= await graphql({schema,source:id})\r\n        // console.log(badges)\r\n        // return formatJSONResponse({\r\n        //     // badges\r\n        // });\r\n        return badges.Item;\r\n    } catch (e) {\r\n        return formatJSONResponse({\r\n            status: 500,\r\n            message: e\r\n        });\r\n    }\r\n})\r\n\r\nexport const updateBadges = middyfy(async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n    try {\r\n        // const parsedBody =  JSON.parse(event.body);\r\n        const parsedBody =  (event[\"args\"][\"input\"]);\r\n        // const badges= await graphql({schema,source: parsedBody.query})\r\n        const data={\r\n            // badgeId:v4(),\r\n            badgeTitle:parsedBody.badgeTitle,\r\n            badgeStatus:parsedBody.badgeStatus,\r\n            badgeImage:parsedBody.badgeImage,\r\n            isAdmin:true\r\n        };\r\n        const badges = await badgesService.updateBadges(parsedBody.badgeId, data)\r\n        // return formatJSONResponse({\r\n        //     badges\r\n        // });\r\n        return badges;\r\n    } catch (e) {\r\n        return formatJSONResponse({\r\n            status: 500,\r\n            message: e\r\n        });\r\n    }\r\n})\r\n\r\nexport const deleteBadges = middyfy(async (event: APIGatewayProxyEvent): Promise<string> => {\r\n    try {\r\n        const parsedBody =  (event[\"args\"][\"badgeId\"]);\r\n        console.log(parsedBody)\r\n        // const parsedBody = JSON.parse(event.body);\r\n        // await graphql({schema,source: parsedBody.query})\r\n        await badgesService.deleteBadges(parsedBody);\r\n        // const res =\"deleted\";\r\n        // return formatJSONResponse({\r\n        //     res:\"s\"\r\n        // });\r\n        return \"Deleted\";\r\n    } catch (e) {\r\n        return formatJSONResponse({\r\n            status: 500,\r\n            message: e\r\n        });\r\n    }\r\n})"],"names":[],"sourceRoot":""}